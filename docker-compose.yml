services:
    application:
        build:
            context: .
            dockerfile: ./.docker/app/Dockerfile
        volumes:
            - .:/var/www

    nginx:
        build:
            context: ./.docker/nginx
            dockerfile: Dockerfile
        expose:
            - "80"
        ports:
            - "${FORWARD_NGINX_PORT:-80}:80"
        volumes:
            - ./.docker/nginx/site.conf:/site.conf
        volumes_from:
            - application
        depends_on:
            - php-fpm
        working_dir: /var/www
        stop_grace_period: 1s
        environment:
            - ENV_NGINX_PHP_CONTAINER_HOST=php-fpm
            - ENV_NGINX_HOST=localhost
            - ENV_NGINX_PUBLIC_PATH=public
            - CRONTAB_LARAVEL_SCHEDULER_ENABLED=true
        networks:
            - messenger

    php-fpm:
        build:
            context: ./.docker/php
            dockerfile: Dockerfile
        volumes:
            - .:/var/www
            - ./.docker/php/fpm-site.conf:/usr/local/etc/php-fpm.d/900-site.conf
        working_dir: /var/www
        expose:
            - "9000"
        labels:
            traefik.enable: "false"
        user: '1000'
        tty: true
        environment:
            - PHP_FPM_PM_MODE=dynamic
            - PHP_FPM_PM_MAX_CHILDREN=20
        networks:
            - messenger

    postgresql:
        image: postgres:16.4
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            PGDATA: /data/postgres
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        restart: always
        volumes:
            - pg_vol:/data/postgres
        ports:
            - "${FORWARD_DB_PORT:-54321}:5432"
        networks:
            - messenger

    postgresql-testing:
        image: postgres:16.4
        environment:
            POSTGRES_DB: ${TESTING_DB_DATABASE}
            POSTGRES_USER: ${TESTING_DB_USERNAME}
            POSTGRES_PASSWORD: ${TESTING_DB_PASSWORD}
            PGDATA: /data/postgres
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -d ${TESTING_DB_DATABASE} -U ${TESTING_DB_USERNAME}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        restart: always
        volumes:
            - pg_vol-testing:/data/postgres
        ports:
            - "${TESTING_FORWARD_DB_PORT:-54322}:5432"
        networks:
            - messenger

networks:
    messenger:
        driver: bridge

volumes:
    pg_vol:
        driver: "local"
    pg_vol-testing:
        driver: "local"
